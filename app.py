# app.py - Phelipe Online - Vers√£o para Streamlit Cloud (sem OCR)
import streamlit as st
import google.generativeai as genai
import os
import io
import pandas as pd
import PyPDF2
import json
from datetime import datetime

# Configura√ß√£o da p√°gina
st.set_page_config(page_title="Phelipe Online - TCE-MT", page_icon="üîç", layout="wide")
st.title("üîç Phelipe: Assistente de An√°lise de PPCIs do TCE-MT")

# Configurar API do Gemini (usando Secrets do Streamlit)
api_key = st.secrets["GEMINI_API_KEY"]
genai.configure(api_key=api_key)
model = genai.GenerativeModel("gemini-1.5-pro")

# Prompt detalhado
prompt_sistema = """
Voc√™ √© Phelipe, um agente especializado em an√°lise de recomenda√ß√µes do TCE-MT, com dupla expertise:
1. T√©cnico de controle externo (TCE-MT)
2. Especialista em controle interno da SES-MT

OBJETIVO PRINCIPAL:
Verificar se a a√ß√£o do gestor √© compat√≠vel com a recomenda√ß√£o, com base apenas nos documentos do processo.

ETAPAS:
1. Analise o relat√≥rio, MPC, decis√£o e resposta.
2. Compare a a√ß√£o com a recomenda√ß√£o.
3. Classifique: ‚úÖ Compat√≠vel, ‚ö†Ô∏è Parcialmente, ‚ùå Incompat√≠vel, üö´ N√£o Aplic√°vel.
4. Justifique com base nos documentos.

AN√ÅLISE POR STATUS DA A√á√ÉO:

- Se a a√ß√£o est√° "Em Implementa√ß√£o":
  ‚Üí Avalie o potencial de efic√°cia: a a√ß√£o descrita, se realizada conforme planejado, corrige o problema?
  ‚Üí Verifique se o prazo informado √© coerente, fact√≠vel e razo√°vel.

- Se a a√ß√£o est√° "Implementada":
  ‚Üí Verifique se h√° evid√™ncia documental da execu√ß√£o.
  ‚Üí Avalie se a a√ß√£o realmente implementou a recomenda√ß√£o.

SA√çDA:
Retorne apenas um JSON com:
{
  "relatorio_tecnico": "...",
  "analise_contextual": "...",
  "classificacao_final": "‚úÖ Compat√≠vel",
  "insights_capacitacao": {},
  "observacoes_memoria": "..."
}
"""

# Fun√ß√£o para extrair texto do PDF (sem OCR)
def extrair_texto_pdf(uploaded_file):
    try:
        uploaded_file.seek(0)
        pdf_reader = PyPDF2.PdfReader(uploaded_file)
        text = ""
        for page in pdf_reader.pages:
            text += page.extract_text() or ""
        return text
    except Exception as e:
        return f"[Erro ao ler PDF: {uploaded_file.name}]"

# Interface
st.subheader("üì• Documentos do Processo")
uploaded_files = st.file_uploader("Envie todos os documentos (PDFs)", type=["pdf"], accept_multiple_files=True)

st.subheader("üìù Dados da An√°lise")
servidor_uniseci = st.text_input("üßë‚Äçüíº Servidor da UNISECI/SES-MT")
data_analise = datetime.now().strftime("%d/%m/%Y")
num_decisao = st.text_input("üî¢ N√∫mero da Decis√£o (ex: Ac√≥rd√£o 1234/2025)")
data_decisao = st.text_input("üìÖ Data da Decis√£o")
num_processo_tce = st.text_input("üìã N√∫mero do Processo no TCE")
num_ppci = st.text_input("üìÑ N√∫mero do PPCI")
num_recomendacao = st.text_input("üîñ N√∫mero da Recomenda√ß√£o")
cod_responsavel = st.text_input("üîê C√≥digo do Respons√°vel OU Procedimento")
orgao_decisao = st.text_input("üèõÔ∏è √ìrg√£o que emitiu a decis√£o", value="TCE-MT")
gestor = st.text_input("üë®‚Äçüíº Gestor")

recomendacao = st.text_area("üìå Recomenda√ß√£o", height=150)

status_acao = st.selectbox(
    "üîß Status da A√ß√£o do Gestor",
    ["Selecione...", "Implementada", "Em Implementa√ß√£o"],
    help="Escolha se a a√ß√£o j√° foi feita ou est√° em andamento/planejada."
)

data_implementacao_gestor = st.text_input(
    "üìÖ Data informada pelo gestor (de implementa√ß√£o ou previs√£o)",
    help="Ex: 15/03/2025 (para 'Em Implementa√ß√£o') ou 10/02/2025 (para 'Implementada')"
)

acao_gestor = st.text_area("üìù A√ß√£o do Gestor", height=150)

if st.button("üöÄ Analisar com Phelipe") and uploaded_files and num_decisao and status_acao != "Selecione...":
    with st.spinner("Phelipe est√° analisando... ‚è≥"):
        try:
            # Extrai texto dos PDFs
            documentos_texto = ""
            for file in uploaded_files:
                text = extrair_texto_pdf(file)
                documentos_texto += f"\n[{file.name}]\n{text}\n"

            # Monta prompt completo
            prompt_completo = f"{prompt_sistema}\n\nN√∫mero da Decis√£o: {num_decisao}\nData da Decis√£o: {data_decisao}\nProcesso: {num_processo_tce}\nPPCI: {num_ppci}\nRecomenda√ß√£o: {recomendacao}\nStatus da A√ß√£o: {status_acao}\nData de Implementa√ß√£o (Gestor): {data_implementacao_gestor}\nA√ß√£o do Gestor: {acao_gestor}\n\n{documentos_texto}"
            
            response = model.generate_content(prompt_completo)
            output = response.text

            try:
                # Extrai JSON
                json_str = None
                if "```json" in output:
                    json_start = output.find("```json") + 7
                    json_end = output.find("```", json_start)
                    if json_end != -1:
                        json_str = output[json_start:json_end].strip()
                elif output.strip().startswith("{"):
                    json_str = output.strip()

                if json_str:
                    data = json.loads(json_str)
                else:
                    data = {"relatorio_tecnico": "Erro: N√£o foi poss√≠vel extrair o JSON da resposta do Gemini."}

                # Exibe resultados
                st.subheader("üìÑ Relat√≥rio T√©cnico")
                st.write(data.get("relatorio_tecnico", "N√£o dispon√≠vel"))

                st.subheader("üè• An√°lise Contextual (SES-MT)")
                st.write(data.get("analise_contextual", "N√£o dispon√≠vel"))

                st.subheader("üìä Classifica√ß√£o Final")
                st.markdown(f"**{data.get('classificacao_final', 'N√£o classificado')}**")

                # Gera CSV com todos os campos
                relatorio = data.get("relatorio_tecnico", "N√£o dispon√≠vel")
                analise_contextual = data.get("analise_contextual", "N√£o dispon√≠vel")
                classificacao_final = data.get("classificacao_final", "N√£o classificado")

                df = pd.DataFrame([{
                    "data_analise": data_analise,
                    "servidor_uniseci": servidor_uniseci,
                    "num_decisao": num_decisao,
                    "data_decisao": data_decisao,
                    "num_processo_tce": num_processo_tce,
                    "num_ppci": num_ppci,
                    "num_recomendacao": num_recomendacao,
                    "cod_responsavel": cod_responsavel,
                    "orgao_decisao": orgao_decisao,
                    "gestor": gestor,
                    "recomendacao": recomendacao[:200],
                    "acao_gestor": acao_gestor[:200],
                    "status_conformidade": classificacao_final,
                    "status_acao": status_acao,
                    "data_implementacao_gestor": data_implementacao_gestor,
                    "relatorio_tecnico": relatorio,
                    "analise_contextual": analise_contextual,
                    "classificacao_final": classificacao_final
                }])
                
                csv = df.to_csv(index=False, encoding='utf-8-sig')
                st.download_button(
                    "‚¨áÔ∏è Baixar CSV (completo)",
                    data=csv,
                    file_name=f"phelipe_completo_{num_decisao.replace('/', '-')}.csv",
                    mime="text/csv"
                )

            except Exception as e:
                st.error(f"Erro ao processar sa√≠da: {e}")
                st.text(output)

        except Exception as e:
            st.error(f"Erro ao processar PDF: {e}")
else:
    st.info("Envie os documentos, preencha os dados e selecione o status da a√ß√£o para come√ßar a an√°lise.")